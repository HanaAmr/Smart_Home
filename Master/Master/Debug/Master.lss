
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000050e  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013de  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095c  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a51  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f1  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000919  00000000  00000000  00003615  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  7a:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue ;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue ;
  82:	44 23       	and	r20, r20
  84:	b9 f1       	breq	.+110    	; 0xf4 <DIO_SetPinDir+0x72>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	6b c0       	rjmp	.+214    	; 0x162 <DIO_SetPinDir+0xe0>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_SetPinDir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_SetPinDir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_SetPinDir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	switch (Value)
 164:	44 23       	and	r20, r20
 166:	b9 f1       	breq	.+110    	; 0x1d6 <DIO_SetPinValue+0x72>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_SetPinValue+0xa>
 16c:	6b c0       	rjmp	.+214    	; 0x244 <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch(Port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_SetPinValue+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPinValue+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_SetPinValue+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_SetPinValue+0x5c>
 17c:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinValue+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinValue+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
			break;
 192:	08 95       	ret
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinValue+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinValue+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
			break;
 1a8:	08 95       	ret
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinValue+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinValue+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
			break;
 1be:	08 95       	ret
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinValue+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinValue+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
			break;
 1d4:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_SetPinValue+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_SetPinValue+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_SetPinValue+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_SetPinValue+0xca>
 1e4:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinValue+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinValue+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
			break;
 1fc:	08 95       	ret
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinValue+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinValue+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
			break;
 214:	08 95       	ret
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinValue+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinValue+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
			break;
 22c:	08 95       	ret
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinValue+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinValue+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <LCD_WriteCommand>:
void LCD_GoTo(uint8 Col, uint8 Row)
{
	uint8 arr[2] = {0x80 , 0xc0};
	
	LCD_WriteCommand(arr[Row]+Col);
}
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	9c 2f       	mov	r25, r28
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	8b bb       	out	0x1b, r24	; 27
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_WriteCommand+0x3c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_WriteCommand+0x42>
 288:	00 00       	nop
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	c2 9f       	mul	r28, r18
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
 29c:	9b b3       	in	r25, 0x1b	; 27
 29e:	9f 70       	andi	r25, 0x0F	; 15
 2a0:	89 2b       	or	r24, r25
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_WriteCommand+0x6c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_WriteCommand+0x72>
 2b8:	00 00       	nop
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_WriteCommand+0x82>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_WriteCommand+0x88>
 2ce:	00 00       	nop
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_Init>:
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <LCD_Init+0x4c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Init+0x56>
 32a:	00 00       	nop
 32c:	83 e3       	ldi	r24, 0x33	; 51
 32e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 332:	82 e3       	ldi	r24, 0x32	; 50
 334:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 338:	88 e2       	ldi	r24, 0x28	; 40
 33a:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 33e:	8c e0       	ldi	r24, 0x0C	; 12
 340:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 356:	08 95       	ret

00000358 <LCD_WriteChar>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	89 2b       	or	r24, r25
 384:	8b bb       	out	0x1b, r24	; 27
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_WriteChar+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_WriteChar+0x42>
 39a:	00 00       	nop
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	c2 9f       	mul	r28, r18
 3aa:	c0 01       	movw	r24, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	9b b3       	in	r25, 0x1b	; 27
 3b0:	9f 70       	andi	r25, 0x0F	; 15
 3b2:	89 2b       	or	r24, r25
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_WriteChar+0x6c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_WriteChar+0x72>
 3ca:	00 00       	nop
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3d6:	8f e1       	ldi	r24, 0x1F	; 31
 3d8:	9e e4       	ldi	r25, 0x4E	; 78
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_WriteChar+0x82>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_WriteChar+0x88>
 3e0:	00 00       	nop
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <LCD_WriteString>:
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	8c 01       	movw	r16, r24
 3ee:	c0 e0       	ldi	r28, 0x00	; 0
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <LCD_WriteString+0x12>
 3f2:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_WriteChar>
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
 3f8:	f8 01       	movw	r30, r16
 3fa:	ec 0f       	add	r30, r28
 3fc:	f1 1d       	adc	r31, r1
 3fe:	80 81       	ld	r24, Z
 400:	81 11       	cpse	r24, r1
 402:	f7 cf       	rjmp	.-18     	; 0x3f2 <LCD_WriteString+0xc>
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteCommand>
 412:	08 95       	ret

00000414 <main>:


int main(void)
{
	/// Make necessary initializations
	 UART_Init();
 414:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_Init>
	 LCD_Init();
 418:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_Init>
	
	 SPI_Master_Init();
 41c:	0e 94 47 02 	call	0x48e	; 0x48e <SPI_Master_Init>
	 SPI_Master_InitTrans();
 420:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_Master_InitTrans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	83 ed       	ldi	r24, 0xD3	; 211
 428:	90 e3       	ldi	r25, 0x30	; 48
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <main+0x16>
 432:	00 c0       	rjmp	.+0      	; 0x434 <main+0x20>
 434:	00 00       	nop
	 
	
    while (1) 
    {
		// Receive data from bluetooth device using UART
		bluetoothData = UART_Rx();
 436:	0e 94 81 02 	call	0x502	; 0x502 <UART_Rx>
 43a:	c8 2f       	mov	r28, r24
		
		if(bluetoothData)
 43c:	88 23       	and	r24, r24
 43e:	d9 f3       	breq	.-10     	; 0x436 <main+0x22>
		{
			// Send data to slave using SPI
			rx_data = SPI_TranSiver(bluetoothData);
 440:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_TranSiver>
			LCD_Clear();
 444:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_Clear>
			
			if(bluetoothData == '1')  // Check type of instruction to send to slave
 448:	c1 33       	cpi	r28, 0x31	; 49
 44a:	29 f4       	brne	.+10     	; 0x456 <main+0x42>
			{
				LCD_WriteString((uint8*)"LED 1 ON");
 44c:	80 e6       	ldi	r24, 0x60	; 96
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WriteString>
 454:	f0 cf       	rjmp	.-32     	; 0x436 <main+0x22>
			} else if(bluetoothData == '2')
 456:	c2 33       	cpi	r28, 0x32	; 50
 458:	29 f4       	brne	.+10     	; 0x464 <main+0x50>
			{
				LCD_WriteString((uint8*)"LED 1 OFF");
 45a:	89 e6       	ldi	r24, 0x69	; 105
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WriteString>
 462:	e9 cf       	rjmp	.-46     	; 0x436 <main+0x22>
			}else if(bluetoothData == '3')
 464:	c3 33       	cpi	r28, 0x33	; 51
 466:	29 f4       	brne	.+10     	; 0x472 <main+0x5e>
			{
				LCD_WriteString((uint8*)"LED 2 ON");
 468:	83 e7       	ldi	r24, 0x73	; 115
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WriteString>
 470:	e2 cf       	rjmp	.-60     	; 0x436 <main+0x22>
			}else if(bluetoothData == '4')
 472:	c4 33       	cpi	r28, 0x34	; 52
 474:	29 f4       	brne	.+10     	; 0x480 <main+0x6c>
			{
				LCD_WriteString((uint8*)"LED 2 OFF");
 476:	8c e7       	ldi	r24, 0x7C	; 124
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WriteString>
 47e:	db cf       	rjmp	.-74     	; 0x436 <main+0x22>
			}else if(bluetoothData == '5')
 480:	c5 33       	cpi	r28, 0x35	; 53
 482:	c9 f6       	brne	.-78     	; 0x436 <main+0x22>
			{
				LCD_WriteString((uint8*)"Checking Temp");
 484:	86 e8       	ldi	r24, 0x86	; 134
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WriteString>
 48c:	d4 cf       	rjmp	.-88     	; 0x436 <main+0x22>

0000048e <SPI_Master_Init>:
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	65 e0       	ldi	r22, 0x05	; 5
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	66 e0       	ldi	r22, 0x06	; 6
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	67 e0       	ldi	r22, 0x07	; 7
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 4b6:	83 e5       	ldi	r24, 0x53	; 83
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9e b9       	out	0x0e, r25	; 14
 4bc:	8d b9       	out	0x0d, r24	; 13
 4be:	08 95       	ret

000004c0 <SPI_Master_InitTrans>:
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	64 e0       	ldi	r22, 0x04	; 4
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 4ca:	08 95       	ret

000004cc <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	SPDR = data;
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	90 bb       	out	0x10, r25	; 16
 4d0:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 4d2:	8e b1       	in	r24, 0x0e	; 14
 4d4:	9f b1       	in	r25, 0x0f	; 15
 4d6:	87 ff       	sbrs	r24, 7
 4d8:	fc cf       	rjmp	.-8      	; 0x4d2 <SPI_TranSiver+0x6>
	
	return SPDR ;
 4da:	8f b1       	in	r24, 0x0f	; 15
 4dc:	90 b3       	in	r25, 0x10	; 16
}
 4de:	08 95       	ret

000004e0 <UART_Init>:
	while(str[i] != '\0')
	{
		UART_Tx(str[i]);
		i++;
	}
}
 4e0:	81 b3       	in	r24, 0x11	; 17
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	81 bb       	out	0x11, r24	; 17
 4e6:	81 b3       	in	r24, 0x11	; 17
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	81 bb       	out	0x11, r24	; 17
 4ec:	8a b1       	in	r24, 0x0a	; 10
 4ee:	88 60       	ori	r24, 0x08	; 8
 4f0:	8a b9       	out	0x0a, r24	; 10
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	86 e8       	ldi	r24, 0x86	; 134
 4fa:	80 bd       	out	0x20, r24	; 32
 4fc:	87 e6       	ldi	r24, 0x67	; 103
 4fe:	89 b9       	out	0x09, r24	; 9
 500:	08 95       	ret

00000502 <UART_Rx>:

uint8 UART_Rx(void)
{
	/*if data received*/
	while(GET_BIT(UCSRA,7) == 0);
 502:	5f 9b       	sbis	0x0b, 7	; 11
 504:	fe cf       	rjmp	.-4      	; 0x502 <UART_Rx>
	
	return UDR ;
 506:	8c b1       	in	r24, 0x0c	; 12
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>

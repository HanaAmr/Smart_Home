
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000722  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000722  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000183a  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a13  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccd  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003bc  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c8  00000000  00000000  00003cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000acf  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  7a:	0c 94 8f 03 	jmp	0x71e	; 0x71e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
 */ 
#include "ADC.h"
#include <avr/io.h>

void ADC_Init(){
	ADMUX |= (1<<REFS0)|(1<<REFS1);						   // Internal V ref
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); // enable and 128 timer prescale
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	87 68       	ori	r24, 0x87	; 135
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	08 95       	ret

00000090 <ADC_Read>:
														  //PortA1 should be input 
}

unsigned short ADC_Read(uint8 channel){
	unsigned short data = 0;
	ADMUX = (ADMUX & 0xE0) | (channel & 0x1F);		// put zeros for the last 5 bits of the ADMUX and Or it with the last 5 bits of the channel
  90:	97 b1       	in	r25, 0x07	; 7
  92:	90 7e       	andi	r25, 0xE0	; 224
  94:	8f 71       	andi	r24, 0x1F	; 31
  96:	89 2b       	or	r24, r25
  98:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADSC);								// start conversion
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF)));					//stay until the interrupt produces 1 (conversion complete)
  a0:	34 9b       	sbis	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_Read+0x10>
	ADCSRA |=(1<<ADIF);								// give the flag one again to clear it
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	86 b9       	out	0x06, r24	; 6
	
	data = ADCL;								   //get the coming data 
  aa:	24 b1       	in	r18, 0x04	; 4
	data |= ADCH<<8 ;
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	98 2f       	mov	r25, r24
  b2:	88 27       	eor	r24, r24
	
	return data;
}
  b4:	82 2b       	or	r24, r18
  b6:	08 95       	ret

000000b8 <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue ;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue ;
  b8:	44 23       	and	r20, r20
  ba:	b9 f1       	breq	.+110    	; 0x12a <DIO_SetPinDir+0x72>
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	09 f0       	breq	.+2      	; 0xc2 <DIO_SetPinDir+0xa>
  c0:	6b c0       	rjmp	.+214    	; 0x198 <DIO_SetPinDir+0xe0>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	89 f0       	breq	.+34     	; 0xe8 <DIO_SetPinDir+0x30>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <DIO_SetPinDir+0x1a>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	c9 f0       	breq	.+50     	; 0xfe <DIO_SetPinDir+0x46>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	11 f1       	breq	.+68     	; 0x114 <DIO_SetPinDir+0x5c>
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDir+0x26>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDir+0x22>
  e2:	82 2b       	or	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinDir+0x3c>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinDir+0x38>
  f8:	82 2b       	or	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x52>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x4e>
 10e:	82 2b       	or	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
 114:	21 b3       	in	r18, 0x11	; 17
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x68>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x64>
 124:	82 2b       	or	r24, r18
 126:	81 bb       	out	0x11, r24	; 17
 128:	08 95       	ret
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_SetPinDir+0x9a>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_SetPinDir+0x82>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_SetPinDir+0xb2>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_SetPinDir+0xca>
 138:	08 95       	ret
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDir+0x8e>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDir+0x8a>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPinDir+0xa6>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPinDir+0xa2>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPinDir+0xbe>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPinDir+0xba>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDir+0xd6>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDir+0xd2>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

0000019a <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	switch (Value)
 19a:	44 23       	and	r20, r20
 19c:	b9 f1       	breq	.+110    	; 0x20c <DIO_SetPinValue+0x72>
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <DIO_SetPinValue+0xa>
 1a2:	6b c0       	rjmp	.+214    	; 0x27a <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch(Port)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	89 f0       	breq	.+34     	; 0x1ca <DIO_SetPinValue+0x30>
 1a8:	28 f0       	brcs	.+10     	; 0x1b4 <DIO_SetPinValue+0x1a>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	c9 f0       	breq	.+50     	; 0x1e0 <DIO_SetPinValue+0x46>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	11 f1       	breq	.+68     	; 0x1f6 <DIO_SetPinValue+0x5c>
 1b2:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 1b4:	2b b3       	in	r18, 0x1b	; 27
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_SetPinValue+0x26>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_SetPinValue+0x22>
 1c4:	82 2b       	or	r24, r18
 1c6:	8b bb       	out	0x1b, r24	; 27
			break;
 1c8:	08 95       	ret
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPinValue+0x3c>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPinValue+0x38>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
			break;
 1de:	08 95       	ret
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SetPinValue+0x52>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SetPinValue+0x4e>
 1f0:	82 2b       	or	r24, r18
 1f2:	85 bb       	out	0x15, r24	; 21
			break;
 1f4:	08 95       	ret
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1f6:	22 b3       	in	r18, 0x12	; 18
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinValue+0x68>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinValue+0x64>
 206:	82 2b       	or	r24, r18
 208:	82 bb       	out	0x12, r24	; 18
			break;
 20a:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	91 f0       	breq	.+36     	; 0x234 <DIO_SetPinValue+0x9a>
 210:	28 f0       	brcs	.+10     	; 0x21c <DIO_SetPinValue+0x82>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	d9 f0       	breq	.+54     	; 0x24c <DIO_SetPinValue+0xb2>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	29 f1       	breq	.+74     	; 0x264 <DIO_SetPinValue+0xca>
 21a:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 21c:	2b b3       	in	r18, 0x1b	; 27
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_SetPinValue+0x8e>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_SetPinValue+0x8a>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
			break;
 232:	08 95       	ret
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 234:	28 b3       	in	r18, 0x18	; 24
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_SetPinValue+0xa6>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_SetPinValue+0xa2>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	88 bb       	out	0x18, r24	; 24
			break;
 24a:	08 95       	ret
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 24c:	25 b3       	in	r18, 0x15	; 21
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinValue+0xbe>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinValue+0xba>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	85 bb       	out	0x15, r24	; 21
			break;
 262:	08 95       	ret
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 264:	22 b3       	in	r18, 0x12	; 18
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinValue+0xd6>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinValue+0xd2>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	82 bb       	out	0x12, r24	; 18
 27a:	08 95       	ret

0000027c <SET_Global_INT>:

void  SET_Global_INT(void)
{
	#if     GLOBAL_INTERRUPT ==  GLOBAL_INTERRUPT_ENABLE
	
	    SET_BIT(SREG , 7);
 27c:	8f b7       	in	r24, 0x3f	; 63
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	8f bf       	out	0x3f, r24	; 63
 282:	08 95       	ret

00000284 <EXT_INT0_Init>:
}

void  EXT_INT0_Init(void)
{
	/*enable global INT*/
	SET_Global_INT();
 284:	0e 94 3e 01 	call	0x27c	; 0x27c <SET_Global_INT>
	
	/*enable EXT INT0*/
	SET_BIT(GICR , 6);
 288:	8b b7       	in	r24, 0x3b	; 59
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	8b bf       	out	0x3b, r24	; 59
	
	
	/*Select Trigger*/
	#if     EXT_INT0_TRIGGER  ==  TRIGGER_RISING
	SET_BIT(MCUCR,0);
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	81 60       	ori	r24, 0x01	; 1
 292:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);
 294:	85 b7       	in	r24, 0x35	; 53
 296:	82 60       	ori	r24, 0x02	; 2
 298:	85 bf       	out	0x35, r24	; 53
 29a:	08 95       	ret

0000029c <LCD_WriteCommand>:
void LCD_GoTo(uint8 Col, uint8 Row)
{
	uint8 arr[2] = {0x80 , 0xc0};
	
	LCD_WriteCommand(arr[Row]+Col);
}
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 2be:	8b b3       	in	r24, 0x1b	; 27
 2c0:	9c 2f       	mov	r25, r28
 2c2:	90 7f       	andi	r25, 0xF0	; 240
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	89 2b       	or	r24, r25
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 2d4:	8f e9       	ldi	r24, 0x9F	; 159
 2d6:	9f e0       	ldi	r25, 0x0F	; 15
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_WriteCommand+0x3c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_WriteCommand+0x42>
 2de:	00 00       	nop
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	63 e0       	ldi	r22, 0x03	; 3
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 2ea:	20 e1       	ldi	r18, 0x10	; 16
 2ec:	c2 9f       	mul	r28, r18
 2ee:	c0 01       	movw	r24, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	9b b3       	in	r25, 0x1b	; 27
 2f4:	9f 70       	andi	r25, 0x0F	; 15
 2f6:	89 2b       	or	r24, r25
 2f8:	8b bb       	out	0x1b, r24	; 27
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_WriteCommand+0x6c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_WriteCommand+0x72>
 30e:	00 00       	nop
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 31a:	8f e1       	ldi	r24, 0x1F	; 31
 31c:	9e e4       	ldi	r25, 0x4E	; 78
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_WriteCommand+0x82>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_WriteCommand+0x88>
 324:	00 00       	nop
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <LCD_Init>:
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	63 e0       	ldi	r22, 0x03	; 3
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	65 e0       	ldi	r22, 0x05	; 5
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	66 e0       	ldi	r22, 0x06	; 6
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	67 e0       	ldi	r22, 0x07	; 7
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	81 ee       	ldi	r24, 0xE1	; 225
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <LCD_Init+0x4c>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_Init+0x56>
 380:	00 00       	nop
 382:	83 e3       	ldi	r24, 0x33	; 51
 384:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 394:	8c e0       	ldi	r24, 0x0C	; 12
 396:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 3ac:	08 95       	ret

000003ae <LCD_WriteChar>:
 3ae:	cf 93       	push	r28
 3b0:	c8 2f       	mov	r28, r24
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 3d0:	8b b3       	in	r24, 0x1b	; 27
 3d2:	9c 2f       	mov	r25, r28
 3d4:	90 7f       	andi	r25, 0xF0	; 240
 3d6:	8f 70       	andi	r24, 0x0F	; 15
 3d8:	89 2b       	or	r24, r25
 3da:	8b bb       	out	0x1b, r24	; 27
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 3e6:	8f e9       	ldi	r24, 0x9F	; 159
 3e8:	9f e0       	ldi	r25, 0x0F	; 15
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_WriteChar+0x3c>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_WriteChar+0x42>
 3f0:	00 00       	nop
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 3fc:	20 e1       	ldi	r18, 0x10	; 16
 3fe:	c2 9f       	mul	r28, r18
 400:	c0 01       	movw	r24, r0
 402:	11 24       	eor	r1, r1
 404:	9b b3       	in	r25, 0x1b	; 27
 406:	9f 70       	andi	r25, 0x0F	; 15
 408:	89 2b       	or	r24, r25
 40a:	8b bb       	out	0x1b, r24	; 27
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 42c:	8f e1       	ldi	r24, 0x1F	; 31
 42e:	9e e4       	ldi	r25, 0x4E	; 78
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <LCD_WriteString>:
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	8c 01       	movw	r16, r24
 444:	c0 e0       	ldi	r28, 0x00	; 0
 446:	03 c0       	rjmp	.+6      	; 0x44e <LCD_WriteString+0x12>
 448:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteChar>
 44c:	cf 5f       	subi	r28, 0xFF	; 255
 44e:	f8 01       	movw	r30, r16
 450:	ec 0f       	add	r30, r28
 452:	f1 1d       	adc	r31, r1
 454:	80 81       	ld	r24, Z
 456:	81 11       	cpse	r24, r1
 458:	f7 cf       	rjmp	.-18     	; 0x448 <LCD_WriteString+0xc>
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_WriteCommand>
 468:	08 95       	ret

0000046a <LCD_WriteInteger>:
}

void LCD_WriteInteger(sint32 intgr)
{
 46a:	8f 92       	push	r8
 46c:	9f 92       	push	r9
 46e:	af 92       	push	r10
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	6b 01       	movw	r12, r22
 47c:	7c 01       	movw	r14, r24

	sint32 y = 1;

	if(intgr < 0)
 47e:	99 23       	and	r25, r25
 480:	5c f4       	brge	.+22     	; 0x498 <LCD_WriteInteger+0x2e>
	{
		LCD_WriteChar('-');
 482:	8d e2       	ldi	r24, 0x2D	; 45
 484:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteChar>
		intgr *= -1;
 488:	f0 94       	com	r15
 48a:	e0 94       	com	r14
 48c:	d0 94       	com	r13
 48e:	c0 94       	com	r12
 490:	c1 1c       	adc	r12, r1
 492:	d1 1c       	adc	r13, r1
 494:	e1 1c       	adc	r14, r1
 496:	f1 1c       	adc	r15, r1
{
	LCD_WriteCommand(0x01);
}

void LCD_WriteInteger(sint32 intgr)
{
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	24 c0       	rjmp	.+72     	; 0x4ea <LCD_WriteInteger+0x80>
		intgr *= -1;
	}

	while(intgr > 0)
	{
		y = ((y*10) + (intgr%10));
 4a2:	dc 01       	movw	r26, r24
 4a4:	cb 01       	movw	r24, r22
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	4c 01       	movw	r8, r24
 4b0:	5d 01       	movw	r10, r26
 4b2:	88 0c       	add	r8, r8
 4b4:	99 1c       	adc	r9, r9
 4b6:	aa 1c       	adc	r10, r10
 4b8:	bb 1c       	adc	r11, r11
 4ba:	88 0c       	add	r8, r8
 4bc:	99 1c       	adc	r9, r9
 4be:	aa 1c       	adc	r10, r10
 4c0:	bb 1c       	adc	r11, r11
 4c2:	88 0e       	add	r8, r24
 4c4:	99 1e       	adc	r9, r25
 4c6:	aa 1e       	adc	r10, r26
 4c8:	bb 1e       	adc	r11, r27
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	2a e0       	ldi	r18, 0x0A	; 10
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	0e 94 4e 03 	call	0x69c	; 0x69c <__divmodsi4>
 4da:	68 0d       	add	r22, r8
 4dc:	79 1d       	adc	r23, r9
 4de:	8a 1d       	adc	r24, r10
 4e0:	9b 1d       	adc	r25, r11
		intgr /= 10;
 4e2:	c2 2e       	mov	r12, r18
 4e4:	d3 2e       	mov	r13, r19
 4e6:	e4 2e       	mov	r14, r20
 4e8:	f5 2e       	mov	r15, r21
	{
		LCD_WriteChar('-');
		intgr *= -1;
	}

	while(intgr > 0)
 4ea:	1c 14       	cp	r1, r12
 4ec:	1d 04       	cpc	r1, r13
 4ee:	1e 04       	cpc	r1, r14
 4f0:	1f 04       	cpc	r1, r15
 4f2:	bc f2       	brlt	.-82     	; 0x4a2 <LCD_WriteInteger+0x38>
 4f4:	12 c0       	rjmp	.+36     	; 0x51a <LCD_WriteInteger+0xb0>
		intgr /= 10;
	}

	while(y > 1 )
	{
		LCD_WriteChar(((y%10)+48));
 4f6:	2a e0       	ldi	r18, 0x0A	; 10
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	0e 94 4e 03 	call	0x69c	; 0x69c <__divmodsi4>
 502:	c2 2e       	mov	r12, r18
 504:	d3 2e       	mov	r13, r19
 506:	e4 2e       	mov	r14, r20
 508:	f5 2e       	mov	r15, r21
 50a:	80 e3       	ldi	r24, 0x30	; 48
 50c:	86 0f       	add	r24, r22
 50e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteChar>
		y /= 10;
 512:	6c 2d       	mov	r22, r12
 514:	7d 2d       	mov	r23, r13
 516:	8e 2d       	mov	r24, r14
 518:	9f 2d       	mov	r25, r15
	{
		y = ((y*10) + (intgr%10));
		intgr /= 10;
	}

	while(y > 1 )
 51a:	62 30       	cpi	r22, 0x02	; 2
 51c:	71 05       	cpc	r23, r1
 51e:	81 05       	cpc	r24, r1
 520:	91 05       	cpc	r25, r1
 522:	4c f7       	brge	.-46     	; 0x4f6 <LCD_WriteInteger+0x8c>
	{
		LCD_WriteChar(((y%10)+48));
		y /= 10;
	}
 524:	ff 90       	pop	r15
 526:	ef 90       	pop	r14
 528:	df 90       	pop	r13
 52a:	cf 90       	pop	r12
 52c:	bf 90       	pop	r11
 52e:	af 90       	pop	r10
 530:	9f 90       	pop	r9
 532:	8f 90       	pop	r8
 534:	08 95       	ret

00000536 <LED0_INIT>:
{
	DIO_SetPinValue(DIO_PORTD , DIO_PIN0 , DIO_PIN_LOW);
}
void LED0_TOGGLE(void)
{
	DIO_TogglePin(DIO_PORTD , DIO_PIN0);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 540:	08 95       	ret

00000542 <LED0_ON>:
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 54c:	08 95       	ret

0000054e <LED0_OFF>:
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 558:	08 95       	ret

0000055a <LED1_INIT>:
}
//**********************************************************************
void LED1_INIT(void) //LED 1
{
	DIO_SetPinDir(DIO_PORTD , DIO_PIN1 , DIO_PIN_OUTPUT);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 564:	08 95       	ret

00000566 <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(DIO_PORTD , DIO_PIN1 , DIO_PIN_HIGH);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 570:	08 95       	ret

00000572 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(DIO_PORTD , DIO_PIN1 , DIO_PIN_LOW);
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_SetPinValue>
 57c:	08 95       	ret

0000057e <main>:


int main(void)
{
	// Make necessary initializations
	LED0_INIT();
 57e:	0e 94 9b 02 	call	0x536	; 0x536 <LED0_INIT>
	LED1_INIT();
 582:	0e 94 ad 02 	call	0x55a	; 0x55a <LED1_INIT>
	LCD_Init();
 586:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Init>
	ADC_Init();
 58a:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	EXT_INT0_Init();
 58e:	0e 94 42 01 	call	0x284	; 0x284 <EXT_INT0_Init>
	
	SPI_Slave_Init();	
 592:	0e 94 2b 03 	call	0x656	; 0x656 <SPI_Slave_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	83 ed       	ldi	r24, 0xD3	; 211
 59a:	90 e3       	ldi	r25, 0x30	; 48
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x1e>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x28>
 5a6:	00 00       	nop
	
	
	while (1)
	{
		// Receive data from Master
		rx_data = SPI_TranSiver(tx_data);
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 44 03 	call	0x688	; 0x688 <SPI_TranSiver>
 5ae:	c8 2f       	mov	r28, r24
		
		if(rx_data)  // Check type of instruction received
 5b0:	88 23       	and	r24, r24
 5b2:	d1 f3       	breq	.-12     	; 0x5a8 <main+0x2a>
		{
			LCD_Clear();
 5b4:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Clear>
			if(rx_data == '1')
 5b8:	c1 33       	cpi	r28, 0x31	; 49
 5ba:	19 f4       	brne	.+6      	; 0x5c2 <main+0x44>
			{
				LED0_ON();
 5bc:	0e 94 a1 02 	call	0x542	; 0x542 <LED0_ON>
 5c0:	f3 cf       	rjmp	.-26     	; 0x5a8 <main+0x2a>
			} else if(rx_data == '2')
 5c2:	c2 33       	cpi	r28, 0x32	; 50
 5c4:	19 f4       	brne	.+6      	; 0x5cc <main+0x4e>
			{
				LED0_OFF();
 5c6:	0e 94 a7 02 	call	0x54e	; 0x54e <LED0_OFF>
 5ca:	ee cf       	rjmp	.-36     	; 0x5a8 <main+0x2a>
			} else if(rx_data == '3')
 5cc:	c3 33       	cpi	r28, 0x33	; 51
 5ce:	19 f4       	brne	.+6      	; 0x5d6 <main+0x58>
			{
				LED1_ON();
 5d0:	0e 94 b3 02 	call	0x566	; 0x566 <LED1_ON>
 5d4:	e9 cf       	rjmp	.-46     	; 0x5a8 <main+0x2a>
			} else if(rx_data == '4')
 5d6:	c4 33       	cpi	r28, 0x34	; 52
 5d8:	19 f4       	brne	.+6      	; 0x5e0 <main+0x62>
			{
				LED1_OFF();
 5da:	0e 94 b9 02 	call	0x572	; 0x572 <LED1_OFF>
 5de:	e4 cf       	rjmp	.-56     	; 0x5a8 <main+0x2a>
			} else if(rx_data == '5')
 5e0:	c5 33       	cpi	r28, 0x35	; 53
 5e2:	11 f7       	brne	.-60     	; 0x5a8 <main+0x2a>
			{
				temp = ADC_Read(1);
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Read>
				temp = temp/4;
 5ea:	96 95       	lsr	r25
 5ec:	87 95       	ror	r24
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
				LCD_WriteInteger(temp);	
 5f2:	bc 01       	movw	r22, r24
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_WriteInteger>
 5fc:	d5 cf       	rjmp	.-86     	; 0x5a8 <main+0x2a>

000005fe <__vector_1>:
	}
}


ISR(INT0_vect)
{
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	LCD_Clear();
 620:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Clear>
	LCD_WriteString((uint8*)"Resetting All");
 624:	80 e6       	ldi	r24, 0x60	; 96
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_WriteString>
	LED0_OFF();
 62c:	0e 94 a7 02 	call	0x54e	; 0x54e <LED0_OFF>
	LED1_OFF();
 630:	0e 94 b9 02 	call	0x572	; 0x572 <LED1_OFF>
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <SPI_Slave_Init>:
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 656:	40 e0       	ldi	r20, 0x00	; 0
 658:	64 e0       	ldi	r22, 0x04	; 4
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	65 e0       	ldi	r22, 0x05	; 5
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	66 e0       	ldi	r22, 0x06	; 6
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	67 e0       	ldi	r22, 0x07	; 7
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_SetPinDir>
 67e:	80 e4       	ldi	r24, 0x40	; 64
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9e b9       	out	0x0e, r25	; 14
 684:	8d b9       	out	0x0d, r24	; 13
 686:	08 95       	ret

00000688 <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	SPDR = data;
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	90 bb       	out	0x10, r25	; 16
 68c:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 68e:	8e b1       	in	r24, 0x0e	; 14
 690:	9f b1       	in	r25, 0x0f	; 15
 692:	87 ff       	sbrs	r24, 7
 694:	fc cf       	rjmp	.-8      	; 0x68e <SPI_TranSiver+0x6>
	
	return SPDR ;
 696:	8f b1       	in	r24, 0x0f	; 15
 698:	90 b3       	in	r25, 0x10	; 16
}
 69a:	08 95       	ret

0000069c <__divmodsi4>:
 69c:	05 2e       	mov	r0, r21
 69e:	97 fb       	bst	r25, 7
 6a0:	1e f4       	brtc	.+6      	; 0x6a8 <__divmodsi4+0xc>
 6a2:	00 94       	com	r0
 6a4:	0e 94 65 03 	call	0x6ca	; 0x6ca <__negsi2>
 6a8:	57 fd       	sbrc	r21, 7
 6aa:	07 d0       	rcall	.+14     	; 0x6ba <__divmodsi4_neg2>
 6ac:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodsi4>
 6b0:	07 fc       	sbrc	r0, 7
 6b2:	03 d0       	rcall	.+6      	; 0x6ba <__divmodsi4_neg2>
 6b4:	4e f4       	brtc	.+18     	; 0x6c8 <__divmodsi4_exit>
 6b6:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__negsi2>

000006ba <__divmodsi4_neg2>:
 6ba:	50 95       	com	r21
 6bc:	40 95       	com	r20
 6be:	30 95       	com	r19
 6c0:	21 95       	neg	r18
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	4f 4f       	sbci	r20, 0xFF	; 255
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255

000006c8 <__divmodsi4_exit>:
 6c8:	08 95       	ret

000006ca <__negsi2>:
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__udivmodsi4>:
 6da:	a1 e2       	ldi	r26, 0x21	; 33
 6dc:	1a 2e       	mov	r1, r26
 6de:	aa 1b       	sub	r26, r26
 6e0:	bb 1b       	sub	r27, r27
 6e2:	fd 01       	movw	r30, r26
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <__udivmodsi4_ep>

000006e6 <__udivmodsi4_loop>:
 6e6:	aa 1f       	adc	r26, r26
 6e8:	bb 1f       	adc	r27, r27
 6ea:	ee 1f       	adc	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	a2 17       	cp	r26, r18
 6f0:	b3 07       	cpc	r27, r19
 6f2:	e4 07       	cpc	r30, r20
 6f4:	f5 07       	cpc	r31, r21
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__udivmodsi4_ep>
 6f8:	a2 1b       	sub	r26, r18
 6fa:	b3 0b       	sbc	r27, r19
 6fc:	e4 0b       	sbc	r30, r20
 6fe:	f5 0b       	sbc	r31, r21

00000700 <__udivmodsi4_ep>:
 700:	66 1f       	adc	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	1a 94       	dec	r1
 70a:	69 f7       	brne	.-38     	; 0x6e6 <__udivmodsi4_loop>
 70c:	60 95       	com	r22
 70e:	70 95       	com	r23
 710:	80 95       	com	r24
 712:	90 95       	com	r25
 714:	9b 01       	movw	r18, r22
 716:	ac 01       	movw	r20, r24
 718:	bd 01       	movw	r22, r26
 71a:	cf 01       	movw	r24, r30
 71c:	08 95       	ret

0000071e <_exit>:
 71e:	f8 94       	cli

00000720 <__stop_program>:
 720:	ff cf       	rjmp	.-2      	; 0x720 <__stop_program>
